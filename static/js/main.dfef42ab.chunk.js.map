{"version":3,"sources":["constants.js","images/dark.png","images/light.png","App.js","reportWebVitals.js","index.js"],"names":["EMode","TEXT_MODE_MAPPER","STYLE_MODE_MAPPER","App","React","useState","isReturningUser","localStorage","savedMode","getItem","userPrefDark","window","matchMedia","matches","getUserPrefColor","darkMode","setDarkMode","useEffect","setItem","JSON","stringify","className","style","color","checked","onChange","id","type","htmlFor","textAlign","width","marginTop","src","DarkFunImage","LightFunImage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAAaA,EACE,YADFA,EAEG,aAIHC,GAAgB,mBACxBD,EAAmB,cADK,cAExBA,EAAkB,aAFM,GAKhBE,GAAiB,mBACzBF,EAAmB,cADM,cAEzBA,EAAkB,aAFO,GCXf,MAA0B,iCCA1B,MAA0B,kCCoF1BG,MA9Ef,WAcI,IAdW,EA8BqBC,IAAMC,UAhBR,WAC1B,IAAMC,EAAkB,SAAUC,aAC5BC,EAAYD,aAAaE,QAAQ,YACjCC,EAXV,WACI,GAAKC,OAAOC,WACZ,OAAOD,OAAOC,WAAW,gCAAgCC,QASpCC,GAGrB,OAAIR,EAAwBE,IAEnBE,KAtBF,mBA8BJK,EA9BI,KA8BMC,EA9BN,KAwCX,OAJAC,qBAAU,WACNV,aAAaW,QAAQ,WAAYC,KAAKC,UAAUL,MACjD,CAACA,IAGA,sBAAKM,UAAWN,EAAWb,EAAkBF,GAAmBE,EAAkBF,GAAlF,UAGI,8BACI,sBAAKqB,UAAU,mBAAf,UACI,sBAAMC,MAAO,CAACC,MAAOR,EAAW,OAAS,UAAzC,0BACA,uBAAMM,UAAU,SAAhB,UACI,uBACIG,QAAST,EACTU,SAAU,kBAAMT,GAAaD,IAC7BW,GAAG,WACHL,UAAU,WACVM,KAAK,aAET,uBAAOC,QAAQ,gBAEnB,sBAAMN,MAAO,CAACC,MAAOR,EAAW,YAAc,QAA9C,yBAKR,uBAAMO,MAAO,CAACO,UAAW,UAAzB,UAEI,6BAAKd,EAAWd,EAAiBD,GAAmBC,EAAiBD,KAGrE,6DAGA,qBAAKsB,MAAO,CAACQ,MAAO,MAAOC,UAAW,IAAKC,IAAKjB,EAAWkB,EAAeC,WChE3EC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dfef42ab.chunk.js","sourcesContent":["export const EMode = {\r\n    DARK_MODE: 'DARK_MODE',\r\n    LIGHT_MODE: 'LIGHT_MODE'\r\n}\r\n\r\n\r\nexport const TEXT_MODE_MAPPER = {\r\n    [EMode.LIGHT_MODE]: 'Light Mode',\r\n    [EMode.DARK_MODE]: 'Dark Mode'\r\n}\r\n\r\nexport const STYLE_MODE_MAPPER = {\r\n    [EMode.LIGHT_MODE]: 'light-mode',\r\n    [EMode.DARK_MODE]: 'dark-mode'\r\n}\r\n","export default __webpack_public_path__ + \"static/media/dark.bb76b6f3.png\";","export default __webpack_public_path__ + \"static/media/light.90863205.png\";","import React, {useEffect} from 'react'\nimport './App.css'\nimport {EMode, STYLE_MODE_MAPPER, TEXT_MODE_MAPPER} from './constants'\nimport DarkFunImage from './images/dark.png'\nimport LightFunImage from './images/light.png'\n\nfunction App() {\n\n    /**\n     * @description Controllo se il tema del dispositivo da cui naviga l'utente è\n     * impostato su dark o meno\n     **/\n    function getUserPrefColor() {\n        if (!window.matchMedia) return\n        return window.matchMedia('(prefers-color-scheme: dark)').matches\n    }\n\n    /**\n     * @description Costrutto per gestire l'init state\n     **/\n    const getColorModeInitState = () => {\n        const isReturningUser = 'dark' in localStorage\n        const savedMode = localStorage.getItem('darkMode')\n        const userPrefDark = getUserPrefColor()\n\n        // if color mode salvata => dark || light\n        if (isReturningUser) return savedMode\n        // if preferred color is dark => dark\n        else if (userPrefDark) return true\n        // altrimenti light\n        else return false\n    }\n\n    /**\n     * @description Hook per gestire dinamicamente lo stato della color mode\n     **/\n    const [darkMode, setDarkMode] = React.useState(getColorModeInitState)\n\n    /**\n     * @description Hook che mi salva sul local storage lo state della color mode\n     * ogni volta che viene aggiornato\n     **/\n    useEffect(() => {\n        localStorage.setItem('darkMode', JSON.stringify(darkMode))\n    }, [darkMode])\n\n    return (\n        <div className={darkMode ? STYLE_MODE_MAPPER[EMode.DARK_MODE] : STYLE_MODE_MAPPER[EMode.LIGHT_MODE]}>\n\n            {/* NAVBAR COMPONENT */}\n            <nav>\n                <div className=\"toggle-container\">\n                    <span style={{color: darkMode ? 'grey' : 'yellow'}}>☀︎</span>\n                    <span className=\"toggle\">\n                        <input\n                            checked={darkMode}\n                            onChange={() => setDarkMode(!darkMode)}\n                            id=\"checkbox\"\n                            className=\"checkbox\"\n                            type=\"checkbox\"\n                        />\n                        <label htmlFor=\"checkbox\"/>\n                    </span>\n                    <span style={{color: darkMode ? 'slateblue' : 'grey'}}>☾</span>\n                </div>\n            </nav>\n\n            {/* MAIN CONTAINER */}\n            <main style={{textAlign: 'center'}}>\n                {/* TITLE */}\n                <h1>{darkMode ? TEXT_MODE_MAPPER[EMode.DARK_MODE] : TEXT_MODE_MAPPER[EMode.LIGHT_MODE]}</h1>\n\n                {/* INFOS */}\n                <h2>Use the toogle to see magic</h2>\n\n                {/* FUN IMAGE */}\n                <img style={{width: '70%', marginTop: 10}} src={darkMode ? DarkFunImage : LightFunImage}/>\n\n            </main>\n\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}